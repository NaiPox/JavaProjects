/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author EUC
 */
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

public class Frame1 extends javax.swing.JFrame {
    // Tillader korresponerende indexer
    private HashMap<Character,Integer> ValuesMap;
    private List<Integer> EncryptedText;
    
    /**
     * Creates new form Frame1
     */
    public Frame1() {
        initComponents();
        ValuesMap = new HashMap<>();
        EncryptedText = new ArrayList<>();
        
        TA2.setEditable(false);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TA1 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        TA2 = new javax.swing.JTextArea();
        Krypter = new javax.swing.JButton();
        Dekrypter = new javax.swing.JButton();
        Clr = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Krypto");

        jLabel1.setText("Input:");

        jLabel2.setText("Output:");

        TA1.setColumns(20);
        TA1.setRows(5);
        jScrollPane2.setViewportView(TA1);

        TA2.setColumns(20);
        TA2.setRows(5);
        jScrollPane3.setViewportView(TA2);

        Krypter.setText("Krypter");
        Krypter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KrypterActionPerformed(evt);
            }
        });

        Dekrypter.setText("Dekrypter");
        Dekrypter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DekrypterActionPerformed(evt);
            }
        });

        Clr.setText("Ryd");
        Clr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClrActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                            .addComponent(jScrollPane3))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 8, Short.MAX_VALUE)
                        .addComponent(Krypter)
                        .addGap(18, 18, 18)
                        .addComponent(Dekrypter)
                        .addGap(18, 18, 18)
                        .addComponent(Clr)
                        .addGap(80, 80, 80))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Krypter)
                    .addComponent(Dekrypter)
                    .addComponent(Clr))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void KrypterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KrypterActionPerformed
        // TODO add your handling code here:
        String UserInput = TA1.getText();
        
        for(int i = 0; i < UserInput.length(); i++)
        {
            //Validerer at en angivet Char er en key i ValuesMap
            if(!ValuesMap.containsKey(UserInput.charAt(i)))
            {
                //Tilegner værdier til Chars
                Random rand = new Random();
                while(true)
                {
                   int RandomizedValue = rand.nextInt(Integer.MAX_VALUE);
                   if(!ValuesMap.containsValue(RandomizedValue))
                        {
                        ValuesMap.put(UserInput.charAt(i), RandomizedValue);
                        break;   
                        }
                }
                
            }
        }
        //Validerer at der ikke forekommer en null værdi og kaster en undtagelse, hvis tilfældet skulle ske.
        for(int i = 0; i < UserInput.length(); i++)
            {
                int value = (ValuesMap.get(UserInput.charAt(i)) != null ? ValuesMap.get(UserInput.charAt(i)) : -1);
            
                if(value == -1) throw new NullPointerException("Der blev fundet en ugyldig værdi i ValuesMap");
                //Hvis ikke der er en null værdi, så taster den værdien ind i variablen EncryptedText.
                EncryptedText.add(value);
            }
        //Vi kører igennem for hvert index med en integer og tilføjer den til outputboksen.
        for(Object i : EncryptedText.toArray())
            {
                TA2.append(i + " ");
            }
       
        try {
            System.out.println("Skriver tabel hos: " + System.getProperty("user.dir") + "\\ValueTable.enc");
            //FileOutputStream initialiseres, så vi har en forbindelse til filens lokalisation.
            FileOutputStream file = new FileOutputStream(System.getProperty("user.dir") + "\\ValueTable.enc");
            //ObjectOutputStream initialiseres, så vi kan skrive til vores fil, dvs. at ObjectOutputStream indsætter data.
            ObjectOutputStream output = new ObjectOutputStream(file);
            //Programmet skriver vores output objekt ind med alt den data der er til stede i ValuesMap.
            output.writeObject(ValuesMap);
            output.close(); //Forbindelse lukkes.
            file.close();   //Filen lukkes.
            }catch (IOException ex){} //I tilfælde af uforudsete fejl, er der oprettet en undtagelseshåndtering. 
        
    }//GEN-LAST:event_KrypterActionPerformed

    private void DekrypterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DekrypterActionPerformed
        // TODO add your handling code here:
        
        //Skaber en variabel så man har adgang til den ønskede sti.
        File encyptionTable = new File(System.getProperty("user.dir") + "\\ValueTable.enc");
        
        if(encyptionTable.exists()){
            try {
                FileInputStream file = new FileInputStream(encyptionTable);
                ObjectInputStream input = new ObjectInputStream(file);
                
                ValuesMap = (HashMap<Character, Integer>)input.readObject();
                
                input.close();
                file.close();
                
                }catch(IOException | ClassNotFoundException ex){
                }
             
                
                                   }
        
        String[] UserInput = TA1.getText().split(" ");
        
        
        TA2.setText(null);
        for(int i = 0; i < UserInput.length; i++)
        {
            int value = Integer.parseInt(UserInput[i]);
            
            ValuesMap.forEach((k,v)-> {
                if(v == value)
                {
                    TA2.append(k.toString());
                }
                                       });
        }
    
    }//GEN-LAST:event_DekrypterActionPerformed

    private void ClrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClrActionPerformed
        // TODO add your handling code here:
        TA1.setText(null);
        TA2.setText(null);
    }//GEN-LAST:event_ClrActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame1().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Clr;
    private javax.swing.JButton Dekrypter;
    private javax.swing.JButton Krypter;
    private javax.swing.JTextArea TA1;
    private javax.swing.JTextArea TA2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
